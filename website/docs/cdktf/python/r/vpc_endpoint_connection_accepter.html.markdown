---
subcategory: "VPC (Virtual Private Cloud)"
layout: "aws"
page_title: "AWS: aws_vpc_endpoint_connection_accepter"
description: |-
  Provides a resource to accept a pending VPC Endpoint accept request to VPC Endpoint Service.
---


<!-- Please do not edit this file, it is generated. -->
# Resource: aws_vpc_endpoint_connection_accepter

Provides a resource to accept a pending VPC Endpoint Connection accept request to VPC Endpoint Service.

## Example Usage

### Accept cross-account request

```python
# Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
from constructs import Construct
from cdktf import Token, TerraformStack
#
# Provider bindings are generated by running `cdktf get`.
# See https://cdk.tf/provider-generation for more details.
#
from imports.aws.vpc_endpoint import VpcEndpoint
from imports.aws.vpc_endpoint_connection_accepter import VpcEndpointConnectionAccepter
from imports.aws.vpc_endpoint_service import VpcEndpointService
class MyConvertedCode(TerraformStack):
    def __init__(self, scope, name):
        super().__init__(scope, name)
        example = VpcEndpoint(self, "example",
            private_dns_enabled=False,
            provider=alternate,
            security_group_ids=[test.id],
            service_name=Token.as_string(aws_vpc_endpoint_service_test.service_name),
            vpc_endpoint_type="Interface",
            vpc_id=test_alternate.id
        )
        aws_vpc_endpoint_service_example = VpcEndpointService(self, "example_1",
            acceptance_required=False,
            network_load_balancer_arns=[Token.as_string(aws_lb_example.arn)]
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        aws_vpc_endpoint_service_example.override_logical_id("example")
        aws_vpc_endpoint_connection_accepter_example =
        VpcEndpointConnectionAccepter(self, "example_2",
            vpc_endpoint_id=example.id,
            vpc_endpoint_service_id=Token.as_string(aws_vpc_endpoint_service_example.id)
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        aws_vpc_endpoint_connection_accepter_example.override_logical_id("example")
```

## Argument Reference

The following arguments are supported:

* `vpc_endpoint_id` - (Required) AWS VPC Endpoint ID.
* `vpc_endpoint_service_id` - (Required) AWS VPC Endpoint Service ID.

## Attributes Reference

In addition to all arguments above, the following attributes are exported:

* `id` - The ID of the VPC Endpoint Connection.
* `vpc_endpoint_state` - State of the VPC Endpoint.

## Import

VPC Endpoint Services can be imported using ID of the connection, which is the `VPC Endpoint Service ID` and `VPC Endpoint ID` separated by underscore (`_`). e.g.

```
$ terraform import aws_vpc_endpoint_connection_accepter.foo vpce-svc-0f97a19d3fa8220bc_vpce-010601a6db371e263
```

<!-- cache-key: cdktf-0.17.1 input-55aef491ec9357dc8cefd3746370faf67067ffc0f94df499640808ff93552129 -->
---
subcategory: "Transit Gateway"
layout: "aws"
page_title: "AWS: aws_ec2_transit_gateway_route"
description: |-
  Manages an EC2 Transit Gateway Route
---


<!-- Please do not edit this file, it is generated. -->
# Resource: aws_ec2_transit_gateway_route

Manages an EC2 Transit Gateway Route.

## Example Usage

### Standard usage

```typescript
// Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
import { Construct } from "constructs";
import { Token, TerraformStack } from "cdktf";
/*
 * Provider bindings are generated by running `cdktf get`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { Ec2TransitGatewayRoute } from "./.gen/providers/aws/ec2-transit-gateway-route";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
    new Ec2TransitGatewayRoute(this, "example", {
      destinationCidrBlock: "0.0.0.0/0",
      transitGatewayAttachmentId: Token.asString(
        awsEc2TransitGatewayVpcAttachmentExample.id
      ),
      transitGatewayRouteTableId: Token.asString(
        awsEc2TransitGatewayExample.associationDefaultRouteTableId
      ),
    });
  }
}

```

### Blackhole route

```typescript
// Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
import { Construct } from "constructs";
import { Token, TerraformStack } from "cdktf";
/*
 * Provider bindings are generated by running `cdktf get`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { Ec2TransitGatewayRoute } from "./.gen/providers/aws/ec2-transit-gateway-route";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
    new Ec2TransitGatewayRoute(this, "example", {
      blackhole: true,
      destinationCidrBlock: "0.0.0.0/0",
      transitGatewayRouteTableId: Token.asString(
        awsEc2TransitGatewayExample.associationDefaultRouteTableId
      ),
    });
  }
}

```

## Argument Reference

The following arguments are supported:

* `destinationCidrBlock` - (Required) IPv4 or IPv6 RFC1924 CIDR used for destination matches. Routing decisions are based on the most specific match.
* `transitGatewayAttachmentId` - (Optional) Identifier of EC2 Transit Gateway Attachment (required if `blackhole` is set to false).
* `blackhole` - (Optional) Indicates whether to drop traffic that matches this route (default to `false`).
* `transitGatewayRouteTableId` - (Required) Identifier of EC2 Transit Gateway Route Table.

## Attributes Reference

In addition to all arguments above, the following attributes are exported:

* `id` - EC2 Transit Gateway Route Table identifier combined with destination

## Import

`awsEc2TransitGatewayRoute` can be imported by using the EC2 Transit Gateway Route Table, an underscore, and the destination, e.g.,

```
$ terraform import aws_ec2_transit_gateway_route.example tgw-rtb-12345678_0.0.0.0/0
```

<!-- cache-key: cdktf-0.17.1 input-c1cd33512986d2076d7edfcf1ac44456fcdaf749f1f4263bf4eee8fa75071101 -->
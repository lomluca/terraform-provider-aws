---
subcategory: "VPC (Virtual Private Cloud)"
layout: "aws"
page_title: "AWS: aws_vpc_endpoint_connection_accepter"
description: |-
  Provides a resource to accept a pending VPC Endpoint accept request to VPC Endpoint Service.
---


<!-- Please do not edit this file, it is generated. -->
# Resource: aws_vpc_endpoint_connection_accepter

Provides a resource to accept a pending VPC Endpoint Connection accept request to VPC Endpoint Service.

## Example Usage

### Accept cross-account request

```typescript
// Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
import { Construct } from "constructs";
import { Token, TerraformStack } from "cdktf";
/*
 * Provider bindings are generated by running `cdktf get`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { VpcEndpoint } from "./.gen/providers/aws/vpc-endpoint";
import { VpcEndpointConnectionAccepter } from "./.gen/providers/aws/vpc-endpoint-connection-accepter";
import { VpcEndpointService } from "./.gen/providers/aws/vpc-endpoint-service";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
    const example = new VpcEndpoint(this, "example", {
      privateDnsEnabled: false,
      provider: alternate,
      securityGroupIds: [test.id],
      serviceName: Token.asString(awsVpcEndpointServiceTest.serviceName),
      vpcEndpointType: "Interface",
      vpcId: testAlternate.id,
    });
    const awsVpcEndpointServiceExample = new VpcEndpointService(
      this,
      "example_1",
      {
        acceptanceRequired: false,
        networkLoadBalancerArns: [Token.asString(awsLbExample.arn)],
      }
    );
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    awsVpcEndpointServiceExample.overrideLogicalId("example");
    const awsVpcEndpointConnectionAccepterExample =
      new VpcEndpointConnectionAccepter(this, "example_2", {
        vpcEndpointId: example.id,
        vpcEndpointServiceId: Token.asString(awsVpcEndpointServiceExample.id),
      });
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    awsVpcEndpointConnectionAccepterExample.overrideLogicalId("example");
  }
}

```

## Argument Reference

The following arguments are supported:

* `vpcEndpointId` - (Required) AWS VPC Endpoint ID.
* `vpcEndpointServiceId` - (Required) AWS VPC Endpoint Service ID.

## Attributes Reference

In addition to all arguments above, the following attributes are exported:

* `id` - The ID of the VPC Endpoint Connection.
* `vpcEndpointState` - State of the VPC Endpoint.

## Import

VPC Endpoint Services can be imported using ID of the connection, which is the `VPC Endpoint Service ID` and `VPC Endpoint ID` separated by underscore (`_`). e.g.

```
$ terraform import aws_vpc_endpoint_connection_accepter.foo vpce-svc-0f97a19d3fa8220bc_vpce-010601a6db371e263
```

<!-- cache-key: cdktf-0.17.1 input-55aef491ec9357dc8cefd3746370faf67067ffc0f94df499640808ff93552129 -->